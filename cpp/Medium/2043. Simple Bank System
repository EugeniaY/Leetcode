class Bank {
private:
    vector<long long> balances;
    int num_accounts;
public:
    Bank(vector<long long>& balance) {
        balances = balance; // copy balance
        num_accounts = balances.size();
    }
    
    bool transfer(int account1, int account2, long long money) {
        // ---> VALIDATION CHECK <---
        // Check if both accounts are valid *before* using them
        if (account1 < 1 || account1 > num_accounts || account2 < 1 || account2 > num_accounts) {
            return false;
        }

        if(money <= balances[account1 - 1]){
            balances[account1 - 1] = balances[account1 - 1] - money;
            balances[account2 - 1] = money + balances[account2 - 1];
            return true;
        }
        else{
            return false;
        }
    }
    
    bool deposit(int account, long long money) {
        // ---> VALIDATION CHECK <---
        // Check if the account is valid *before* using it
        if (account < 1 || account > num_accounts) {
            return false;
        }

        balances[account - 1] = balances[account - 1] + money;
        return true;
    }
    
    bool withdraw(int account, long long money) {
        // ---> VALIDATION CHECK <---
        // Check if the account is valid *before* using it
        if (account < 1 || account > num_accounts) {
            return false;
        }

        if(money <= balances[account- 1]){
            balances[account - 1] = balances[account - 1] - money;
            return true;
        }
        else{
            return false;
        }
    }
};

/**
 * Your Bank object will be instantiated and called as such:
 * Bank* obj = new Bank(balance);
 * bool param_1 = obj->transfer(account1,account2,money);
 * bool param_2 = obj->deposit(account,money);
 * bool param_3 = obj->withdraw(account,money);
 */
